name: Build and Release Executable

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1. Checkout do Repositório
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessário para acessar todas as tags

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Substitua pela versão específica do Python que você está usando

      # 3. Instalar Dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Verificar Instalação do PyInstaller
      - name: Verify PyInstaller Installation
        run: |
          python -m PyInstaller --version

      # 5. Construir Executável com PyInstaller
      - name: Build Executable with PyInstaller
        run: |
          python -m PyInstaller --onefile script.py

      # 6. Listar Conteúdo da Pasta 'dist' para Depuração
      - name: List dist Directory After Build
        run: |
          dir dist
        shell: cmd

      # 7. Verificar Existência do Executável
      - name: Check if Executable Exists
        shell: pwsh
        run: |
          if (-not (Test-Path "dist\script.exe")) {
            Write-Output "Executable not found!"
            exit 1
          } else {
            Write-Output "Executable successfully created."
          }

      # 8. Configurar Git para Criar Tags
      - name: Set up Git for Tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 9. Obter a Última Tag Semântica
      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        shell: bash  # Especifica o uso do bash

      # 10. Incrementar a Versão (PATCH)
      - name: Increment version
        id: increment_version
        run: |
          if [ -z "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            new_version="v0.1.0"
          else
            # Remove o prefixo 'v' e separa os componentes
            version=${{ steps.get_latest_tag.outputs.latest_tag }}
            version=${version#v}
            IFS='.' read -r -a parts <<< "$version"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            new_version="v$major.$minor.$patch"
          fi
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
        shell: bash  # Especifica o uso do bash

      # 11. Criar uma Nova Tag
      - name: Create new tag
        run: |
          git tag ${{ steps.increment_version.outputs.new_version }}
          git push origin ${{ steps.increment_version.outputs.new_version }}
        shell: bash  # Especifica o uso do bash

      # 12. Criar Release e Anexar Executável
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.0  # Versão atualizada
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: Release ${{ steps.increment_version.outputs.new_version }}
          draft: false
          prerelease: false

      # 13. Upload de Ativo do Release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/script.exe
          asset_name: script.exe
          asset_content_type: application/zip
